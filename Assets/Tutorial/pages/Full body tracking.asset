%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4510294d23d964fe59443526f1ca7c4b, type: 3}
  m_Name: Full body tracking
  m_EditorClassIdentifier: 
  m_displayName: Full Body Tracking
  m_hierarchyName: Full Body Tracking
  m_context: {fileID: 11400000, guid: da88ed1056694c743a90b155b1ed8e58, type: 2}
  m_markdownFile: {fileID: 0}
  m_priority: 1009
  m_overrideMarkdownText: "# Full Body Tracking\n\nNorthStar supports full-body tracking
    using the [Meta Movement SDK](https://developers.meta.com/horizon/documentation/unity/move-overview/).
    While the SDK provides a solid foundation that we implemented logic on top to
    serve the needs of this project. \n\n![](./Images/FullBodyTracking/Fig1.png)\n\n##
    Meta Movement SDK Setup\n\nTo set up body tracking, follow the recommended workflow:
    \n- Right-click the player rig GameObject. \n- Select the body tracking setup
    option. \n\n![](./Images/FullBodyTracking/Fig0.png)\n\nThis process configures
    the RetargetingLayer component and the FullBodyDeformationConstraint, which work
    largely out of the box.\n\n## Calibration\n\n**Avatar Scaling**\n\nOnce the player
    has calibrated their height in the menu, we are able to scale the player avatar
    to match their height. We scale the player rig based on it\u2019s initial height
    vs the player\u2019s height. We also need to adjust the rig slightly to take
    the height offset into account.\n\n#### Relevant Files\n- [PlayerCalibration.cs](../Assets/NorthStar/Scripts/Player/PlayerCalibration.cs)\n\n**Seated
    vs Standing**\n\nSince North Star needed to support both seated and stading play,
    we added an additional offset to the player rig so that they would appear standing
    in the game even if the player is currently sitting. The offset is calculated
    based on the difference between the player\u2019s calibrated standing and seated
    height, which can be set in the menu.\n\nThere were some issues with the full-body
    tracking system since it does not seem to support manual offsets which would
    cause the player rig to crouch no matter how you offset the skeleton. To work
    around this, we opted to use only upper body tracking, while taking care of the
    leg placement ourselves. \n\n**Custom Leg Solution**\n\n![](./Images/FullBodyTracking/Fig2.png)\n\nInitially
    we used the built-in full body tracking leg solution that comes with the Movement
    SDK. This worked fine for standing play, but we were unable to find an option
    to accommodate seated play. Ultimately, we ended up creating an alternative leg-IK
    solution (using Unity's rigging package) that provided similar functionality
    for foot placement / stepping / crouching.\n\n#### Relevant Files\n- [BodyPositions.cs](../Assets/NorthStar/Scripts/Player/BodyPositions.cs)\n\n##
    Postprocessors\n\n**Physics Hands Retargeting**\n\nDue to using physically simulated
    hands, we had to use a RetargetingProcessor to retarget the hands using IK. The
    CustomRetargetingProcessorCorrectHand is a modified version of the original from
    Meta that also supports overriding hand rotation in addition to position. \n\n####
    Relevant Files\n- [CustomRetargetingProcessorCorrectHand.cs](../Assets/NorthStar/Scripts/Player/CustomRetargetingProcessorCorrectHand.cs)\n\n**Hands,
    Elbow and Twist Bone Correction**\n\nAfter the hand and arm bones have been retargeted,
    the elbow and twist bones are sometimes out of alignment. To correct this, we
    introduced an additional processor that corrects the elbow and twist bone orientation
    which involved keeping the elbow locked to one axis (relative to the shoulder),
    while distributing the wrist rotation along the twist and wrist bones. \n\nTo
    match the player\u2019s tracked hands more closely we also use this processor
    to match the tracked finger bones. \n\n#### Relevant Files\n- [SyntheticHandRetargetingProcessor.cs](../Assets/NorthStar/Scripts/Player/SyntheticHandRetargetingProcessor.cs)\n\n##
    Tracking Failure\n\nThere were several cases in which full body tracking would
    fail. Sometimes tracking would fail to initialize, especially when testing via
    Oculus Link during development. \n\nWhen tracking failure is detected we simply
    switch off the full-body rig and change back to the standard floating ghost hands.
    We also attempt to shut down and restart body tracking whenever the headset waves
    from sleep or put back on after being taken off. \n\nUnfortunately, there still
    remains a strange, persistent bug where the player\u2019s body would be squished
    into the floor, while no indication of tracking failure would be reported by
    the SDK. The cause remains unknown for now. \n\n## Future Improvements\n\nThere
    are still some issues with the full body tracking implementation that could be
    improved, such as slight alignment issues with the avatar\u2019s head as well
    as the feet floating off the ground when in seated mode. \n"
  m_overrideMarkdownRoot: .\Documentation/
