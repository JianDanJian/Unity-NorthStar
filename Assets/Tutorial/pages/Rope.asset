%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4510294d23d964fe59443526f1ca7c4b, type: 3}
  m_Name: Rope
  m_EditorClassIdentifier: 
  m_displayName: Rope
  m_hierarchyName: Rope
  m_context: {fileID: 11400000, guid: 0213ac5a1a4e20343897a54b5d658570, type: 2}
  m_markdownFile: {fileID: 0}
  m_priority: 1010
  m_overrideMarkdownText: "# Rope System \n\nA major part of NorthStar\u2019s development
    focused on creating a compelling and realistic rope simulation system. To achieve
    this, we implemented a hybrid approach combining Verlet integration for simulation
    and anchoring constraints for interactive rope behavior. \n\n## Verlet Simulation
    \n\n![](./Images/RopeSystem/Fig3.png)\n\nVerlet integration is well-suited for
    rope physics as it simplifies point mass calculations. Each point mass stores
    only its current and previous position (assuming a unit mass), and constraints
    are enforced by iteratively adjusting point positions to maintain the rope\u2019s
    rest length. \n\nWe used this approach to simulate the visual behavior of ropes
    reacting to player interactions. However, the forces only traveled in one direction\u2014from
    the player to the rope, rather than bidirectionally. \n\nTo further improve stability,
    we implemented a binding system that allowed specific nodes in the rope simulation
    to behave as kinematic points (not affected by forces or constraints). To support
    large numbers of nodes and high iteration counts for constraint solving, the
    Verlet simulation was optimized using Burst Jobs for better performance. \n\n###
    Relevant Files\n- [BurstRope.cs](../Assets/NorthStar/Scripts/Rope/VerletRope/BurstRope.cs)\n\n##
    Anchoring Constraints \n\nTo allow the player to interact with and be constrained
    by ropes, we developed an anchoring system. This system enabled ropes to wrap
    around static objects, dynamically creating bends that constrained the Verlet
    simulation. \n\n**How Anchors Work:**\n\n- When the rope encounters an obstacle
    (based on normal direction, bend angle, and bend direction), a new anchor is
    created.\n- If the player is holding the rope, the system calculates the rope
    length between two anchors and applies a configurable joint with a linear limit
    to prevent overstretching.\n- Slack and spooled rope are also accounted for,
    allowing for:\n    - Loose rope to be pulled through when tightening.\n    -
    Extra rope to be spooled out, such as for sail controls. \n- If the player exerts
    enough force, the rope can slip, allowing hands to slide along it like a real
    rope.\n- The number of bends, slack amount, and spooled rope length can trigger
    events when the rope is pulled tight or tied. \n\n### Relevant Files\n- [RopeSystem.cs](../Assets/NorthStar/Scripts/Rope/RopeSystem.cs)\n\n##
    Tube Rendering \n\n![](./Images/RopeSystem/Fig2.png)\n\nTo visually render the
    ropes, we developed a tube renderer that: \n\n- Uses the rope nodes to generate
    a lofted mesh along a spline.\n- Supports subdivisions for additional detail.\n-
    Adds indentation and twisting for a more realistic rope appearance.\n- Utilizes
    normal mapping for enhanced depth and texture.\n- Is optimized using Burst Jobs
    for efficient performance. \n\n### Relevant Files\n- [BurstRope.cs](../Assets/NorthStar/Scripts/Rope/VerletRope/TubeRenderer.cs)\n\n##
    Collision Detection \n\n![](./Images/RopeSystem/Fig1.png)\n\nHandling rope collision
    detection efficiently was a major challenge. We used Physics.ComputePenetration()
    to detect interactions between Verlet nodes and nearby level geometry. However,
    there were two key issues: \n1. ComputePenetration is not compatible with Jobs
    or Burst, meaning collision detection had to be performed on the main thread
    after Verlet simulation.\n2. Single collision checks per frame caused phasing
    issues, as ropes would pass through objects when nodes were forced apart.\n\n**Optimizations
    for Better Collision Detection:** \n\nTo resolve these issues, we: \n- Split
    the rope simulation into multiple sub-steps, running a collision check after
    each sub-step.\n- Forced the first job to complete immediately, allowing for
    collision checks early in the frame.\n- Performed the second sub-step during
    the frame, resolving it in LateUpdate() for increased stability.\n- Used SphereOverlapCommand
    in a Job to efficiently gather potential collisions without stalling the main
    thread. \n\n### Relevant Files\n- [BurstRope.cs](../Assets/NorthStar/Scripts/Rope/VerletRope/BurstRope.cs)\n\n##
    Editor Workflow \n\n![](./Images/RopeSystem/Fig4.png)\n\nWe streamlined the process
    of adding and configuring ropes in scenes with an intuitive editor workflow:
    \n- Start with the RopeSystem prefab.\n- Edit the included spline to define the
    desired rope shape.\n- Use context menu options in the RopeSystem component to:\n   
    - Set up nodes.\n    - Define the rope\u2019s total length.\n- Run the simulation
    in a test scene and allow the rope to settle naturally.\n- Copy the anchor points
    and BurstRope nodes from the simulation back into the editor.\n- Finalize the
    rope setup for use in live gameplay. \n\n![](./Images/RopeSystem/Fig0.png)\n\n####
    Relevant Files\n- [RopeSystem.prefab](../Assets/NorthStar/Prefabs/RopeSystem.prefab)\n\n##
    Conclusion\n\nBy combining Verlet simulation with dynamic anchoring constraints,
    we created a realistic and performant rope system for NorthStar. The use of Burst
    Jobs, tube rendering, and multi-step collision detection allowed us to balance
    realism, interactivity, and performance. The editor workflow further streamlined
    the development process, enabling efficient iteration and fine-tuning of rope
    behaviors. \n"
  m_overrideMarkdownRoot: .\Documentation/
