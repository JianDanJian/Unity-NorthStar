%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4510294d23d964fe59443526f1ca7c4b, type: 3}
  m_Name: Shadow Importance Volumes
  m_EditorClassIdentifier: 
  m_displayName: Shadow Importance Volumes
  m_hierarchyName: Shadow Importance Volumes
  m_context: {fileID: 11400000, guid: c8be8ea05ef5f814eae4dfad7d0921a5, type: 2}
  m_markdownFile: {fileID: 0}
  m_priority: 1015
  m_overrideMarkdownText: "## Shadow Importance Volumes \n\nUnity will ensure the
    full viewport, up to the configured maximum shadow distance, has coverage in
    the shadowmap. For many games and on other platforms, this is sufficient to balance
    texel density with full scene coverage, however as this game takes place on the
    surface of a ship, and with the Meta Quests impressive FOV, it is wasteful to
    assign shadow coverage for areas of the viewport such as the sky and ocean. Shadow
    Importance Volumes address this by allowing a designer to specify which surfaces
    require shadowmap coverage, and allowing all other surfaces to lie outside of
    the shadow volume.\n\n![](./Images/ShadowImportance/Fig1.png)\n\nShadowImportanceVolumes
    require changes to URP in provide a mechanism to adjust the shadow projection
    matrix and shadow distance before shadow casting.\n\n### Relevant Files\n- [ShadowImportanceVolume.cs](../Assets/NorthStar/Scripts/Utils/ShadowImportanceVolume.cs)\n-
    [ShadowUtils.cs](../Packages/com.unity.render-pipelines.universal/Runtime/ShadowUtils.cs)\n-
    [MainLightShadowCasterPass.cs](../Packages/com.unity.render-pipelines.universal/Runtime/Passes/MainLightShadowCasterPass.cs)\n\n##
    Using Shadow Importance Volumes\n\nShadow Importance Volumes will automatically
    be enabled when any enabled volume intersects the camera. To create a new volume,
    create an empty Game Object, and then select Add Component and choose ShadowImportanceVolume.
    You can then reposition and scale the volume into position. Any surface that
    can receive shadows should be inside a volume. The entire object/mesh is not
    required to be inside the volume, only the surface.\n\n![](./Images/ShadowImportance/Fig2.png)\n\nIf
    all volumes are disabled or do not intersect the camera, shadows will revert
    to their default Unity implementation.\n\n## How they work\n\nAll volumes in
    the game world are first intersected with the active cameras frustum. Any volume
    or part of a volume that lies outside of the camera frustum is ignored. The intersection
    of the volumes and frustum is then used as a hull for shadowcasting - the hull
    is transformed into shadow space, and an adjustment matrix is generated to fit
    the shadowmap more tightly around the active areas.\n\nUnity camera frustum with
    a far distance of 20:\n\n![](./Images/ShadowImportance/Fig3.png)\n\nComparison
    of shadowmap between default and with volumes on the ship deck. The very wide
    FOV forces Unity to size the shadowmap inefficiently:\n\n![](./Images/ShadowImportance/Fig4.png)\n"
  m_overrideMarkdownRoot: .\Documentation/
