%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4510294d23d964fe59443526f1ca7c4b, type: 3}
  m_Name: URP Modifications
  m_EditorClassIdentifier: 
  m_displayName: URP Modifications
  m_hierarchyName: URP Modifications
  m_context: {fileID: 11400000, guid: 9be0af5c5d3ad9f45a1a0843c4381d44, type: 2}
  m_markdownFile: {fileID: 0}
  m_priority: 1013
  m_overrideMarkdownText: "## URP Modifications\n\nThe Universal Render Pipeline
    served as a great starting point for the project, it offers a lot of features
    and flexibility to kick start development. To better serve the needs of the project,
    some modifications were made to URP shaders and code.\n\n**Shader Modifications**\n\nThe
    Unity BRDF has been replaced by a more accurate approximation, improving the
    lighting response on the ocean and other shiny surfaces. This comes at a slight
    increase in cost for all surfaces in the game. To counteract this, a specialized
    non-metallic BRDF was also included for all non-metallic surfaces. This can be
    configured in the Shader Graph Settings by toggling \u201CNon-Metallic Surface\u201D.\n\nUnity
    shadowing is quite flexible, selecting at runtime between supported quality settings.
    While small, the cost of reading these cbuffer values, reducing shader size,
    and potentially reducing register usage presents an easy optimization opportunity.
    Where appropriate, these values were hard-coded to the ones required by the project.
    Surfaces facing away from the light source, or otherwise with light fully attenuated,
    are unaffected by shadow sampling. Shadow sampling was moved into a branch so
    that surfaces facing away from the light source do not sample from the shadow
    map. \n\nThe ship relies on Reflection Probes to simulate reflections on the
    deck surface, particularly where wet. These probes, and the box projection, must
    rotate with the ship for this to be convincing. We achieve this by passing a
    _ProbeReorientation matrix into GlobalIllumination.hlsl, and applying this when
    calculating the cubemap sample point. \n\n### Relevant Files\n- [BRDF.hlsl](../Packages/com.unity.render-pipelines.universal/ShaderLibrary/BRDF.hlsl)\n-
    [UniversalLitSubTarget.cs](../Packages/com.unity.render-pipelines.universal/Editor/ShaderGraph/Targets/UniversalLitSubTarget.cs)\n-
    [Shadows.hlsl](../Packages/com.unity.render-pipelines.universal/ShaderLibrary/Shadows.hlsl)\n-
    [Lighting.hlsl](../Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl)\n-
    [GlobalIllumination.hlsl](../Packages/com.unity.render-pipelines.universal/ShaderLibrary/GlobalIllumination.hlsl)\n\n**Code
    Modifications**\n\nBy default, the XR display will be configured to match the
    MSAA value configured in the URP asset, however any post processing will force
    an MSAA resolve making it unnecessary to blit to an MSAA display target. \n\nURP
    versions before 14.0.9 have a bug causing excessive texture reallocation with
    Dynamic Resolution, leading to poor framerate and eventually an out-of-memory
    crash. This can be fixed by following the guide [here](https://developers.meta.com/horizon/documentation/unity/dynamic-resolution-unity/).
    We found it necessary to also enable DynamicResolution support in the RTHandles
    system immediately after initializing it in UniversalRenderPipeline.cs. \n\nWe
    use ShadowImportanceVolumes to dynamically adjust the shadow map projection,
    which requires an entrypoint in ShadowUtils. This allows modifying the shadow
    projection matrix and distance values. MainLightShadowCasterPass.cs was also
    modified to pass through the camera data to facilitate computing accurate shadow
    importance volumes.\n\n### Relevant Files\n- [UniversalRenderPipeline.cs](../Packages/com.unity.render-pipelines.universal/Runtime/UniversalRenderPipeline.cs)\n-
    [UniversalRenderer.cs](../Packages/com.unity.render-pipelines.universal/Runtime/UniversalRenderer.cs)\n-
    [ShadowUtils.cs](../Packages/com.unity.render-pipelines.universal/Runtime/ShadowUtils.cs)\n-
    [MainLightShadowCasterPass.cs](../Packages/com.unity.render-pipelines.universal/Runtime/Passes/MainLightShadowCasterPass.cs)\n"
  m_overrideMarkdownRoot: .\Documentation/
