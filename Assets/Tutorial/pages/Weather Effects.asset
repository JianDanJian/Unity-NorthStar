%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4510294d23d964fe59443526f1ca7c4b, type: 3}
  m_Name: Weather Effects
  m_EditorClassIdentifier: 
  m_displayName: Weather Effects
  m_hierarchyName: Weather Effects
  m_context: {fileID: 11400000, guid: 7ada8dafba80f394dbd5d80507599a4b, type: 2}
  m_markdownFile: {fileID: 0}
  m_priority: 1006
  m_overrideMarkdownText: "# Weather Effects \n\n## Rain \n\n#### Rain Ripples \n\nAs
    part of the rain system in NorthStar, rain ripples were added. The ripples are
    a procedural shader driven effect that is part of the NorthStarDefaultShader
    shader function. \n\nTo drive the rain ripples on compatible surfaces in the
    scene, use the Rain Data Scriptable object to configure the ripple settings and
    add the Rain Controller Component into the scene to enable/disable the rain ripples.
    \n\n![](./Images/WeatherEffects/Fig17.png)\n\n#### Optimization\n\nTo reduce
    texture samples a procedural function was employed. The pros of using a procedural
    approach rather than a texture flipbook approach is the level of control and
    reusability. The procedural ripples can be setup to have a variable density and
    intensity that would be hard to achieve with a flip book. This also allows us
    to optimize the effect as much as we need to by removing ripple layers. For the
    Quest 2 builds the amount of rain ripples is halved. \n \n### RainDrops \n\nRaindrops
    are currently a standalone Particle System that's configured and placed as necessary.
    Implementation into the Rain Controller is a work in progress. \n\n#### Optimization
    and challenges\n\nIn VR clipping with the player camera generally doesn't look
    good, especially with high-frequency effects like rain. The difficulty with raindrops
    in NorthStar is the perception of small geometry in the distance making it hard
    to read the raindrops, particles become too small where they read as nothing
    or noise and contribute largely to fragment overdraw. \n\nInstead of fading out
    the particles as they get near the player\u2019s camera and dealing with clipping
    geometry, we implemented a dynamic solution that scales the particle size by
    the distance from the player and when the particles are at a size of 0 they get
    moved behind the player, reducing fragment overdraw, increasing performance and
    allowing better particle readability based on distance. \n\n### Wind \n\nWind
    has been implemented as a procedural shader feature in the NorthStar\u2019s foliage
    shaders. Wind will only work when a Wind controller component is present in the
    scene and models have the correct vertex color setup. \n\n#### Optimization \n\nThe
    wind system is a combination of multiple sine waves added together to simulate
    complex foliage movements. \n\n## Geometry vertex colors setup: \n\nThere are
    two types of foliage supported: \n\n### Single layer for simple foliage: \n\nSingle
    layer foliage is geometry that only has a single channel of motion to it. This
    is mostly reserved for small foliage clusters like grass, flowers or anything
    that doesn't need a trunk to it. \n\n**Vertex Color setup:**\n\nR: Wind Influence.
    0-1 How much the wind influences the vertices. \n\nG: None \n\nB: Random ID.
    Random offset. Can be used per leaf cluster \n\nA: None \n\nExample: \n\n![](./Images/WeatherEffects/Fig5.png)\n
    \n\n### Double Layer for more complex foliage: \n\nThis setup is mostly used
    for foliage with a primary and secondary set of motion. For instance, in NorthStar
    the kelp in Beat 7 has a primary set of motion for the stem and then the leaves
    inherit the first set and add on the second set of motion to create a more fluid
    complex motion. \n\n**Vertex Color Setup:** \n\nR: Stem: Black \t\t\tLeaves:
    Wind Influence \n\nG: Stem: Wind Influence\t\tLeaves: Stem Wind Influence \n\nB:
    Stem: None \t\t\tLeaves: Random ID \n\nA: Stem: None \t\t\tLeave: None \n\nTrunk:
    \n\n![](./Images/WeatherEffects/Fig4.png)\n\nThe parameters for the wind itself
    is stored in the Wind Data scriptable object which can be previewed in the Wind
    controller when the Wind Data field is populated. \n\n![](./Images/WeatherEffects/Fig17.png)
    \n\n## Asset optimization \n\nOne of our most graphically intense scenes was
    the Docks scene in Beat2. This scene required the boat and a whole island to
    be in the same frame. With set dressing in the later stages of finalization,
    some light profiling revealed our vertex counts were fairly high. \n\n![](./Images/WeatherEffects/Fig13.png)
    ![](./Images/WeatherEffects/Fig1.png)\n\n \n\nA few techniques that were used
    to optimize geometry were approaches like LODs, imposters, and billboards, but
    these won\u2019t be covered since they are standard approaches to optimization. 
    \n\nIn NorthStar, where applicable, teleportation points were used to define
    a rough vertex density based on the distance from the teleportation point. Since
    NorthStar\u2019s navigations are based on stationary points and not free movement
    we can be quite brutal in reducing geometry. \n\nNo real metric was followed
    for reductions as they were generally made until silhouettes started to show
    hard edges. \n\n \n\nDensity decreases over distance. \n\n![](./Images/WeatherEffects/Fig2.png)\n\nThe
    red circles indicate places where the player stands. \n\nTo help reduce drawcalls
    and the scene vertex count the boat was also broken up into 4 parts based on
    where the player can navigate. \n\n![](./Images/WeatherEffects/Fig16.png)\n\nEach
    of these segments was baked down into a single mesh component with 2 materials.
    One material for the metal components and one material for the non-metal parts.
    With the LOD system extended to support manual LOD switching any part of the
    4 deck parts could be switching to a cheaper version of the boat . \n\n![](./Images/WeatherEffects/Fig8.png)\n\nAny
    geometry that didn\u2019t need optimization was out of these custom LOD meshes.
    \n\n## Shader System \n\nThe majority of NorthStar\u2019s shaders were made with
    Shader Graph. These shaders were optimized for the Quest platform and below are
    the considerations that were made. \n\n### Texture Configuration \n\nTo reduce
    the number of texture samples used in NorthStar\u2019s PBR shaders, a custom
    texture packing setup was used, this is how the channels are broken down: \n\nBaseColor
    Texture: \n\nRGB: \tBase Color \n\nA:\tOpacity/Emissive. Emissive is multiplied
    with Base Color \n\nNormal Texture: \n\nRG: \tNormal  \n\nG: \tSmoothness \n\nB:
    \tMetallic/Ambient Occlusion/Height \n\nThe structure is to pack the most useful
    channels first and leave any channels that are conditional last. This works well
    with ASTC since compression is linear across all channels so we don\u2019t suffer
    from leaving or using any extra texture channels. \n\n### Shaders \n\nEarly on
    in development, an uber shader approach was used to reduce the amount of shaders
    required to maintain and allow materials to be easily setup, any feature can
    be enabled and disabled as needed. When a Parameter is connected to the node
    graph the shader compiler sees that as a dynamic \u201Cconstant\u201D forcing
    the shader to compute that  entire node chain, this prevents Unity\u2019s shader
    compiler from collapsing shader instructions down reducing shader complexity.
    \n\nA good example of this is between stock options for the PBR_N and PBR_NSM
    shaders. \n\n![](./Images/WeatherEffects/Fig7.png)\n![](./Images/WeatherEffects/Fig0.png)\n![](./Images/WeatherEffects/Fig12.png)
    \n\n(Left no parameters, right with parameters) \n\nJust by disconnecting the
    SmoothnessValue and Metallicvalue parameters from the shader graph we get a 15%~
    instruction count savings, not all instructions cost the same so it\u2019s not
    a 1-1 performance increase, but every little bit helps. \n\nUsing this as our
    basis we created a collection of shaders covering all our common use cases. \n\n![](./Images/WeatherEffects/Fig10.png)\n\nShader
    functions were used extensively to maintain consistency between these shaders.
    One in particular was the Uber shader function that we\u2019d manually enable
    and disable features with constants rather than parameters to take advantage
    of this optimization process. \n\n![](./Images/WeatherEffects/Fig11.png)\n\n###
    Material ShaderGUIs \n\nTo help artists choose the right shaders a custom shader
    inspector was created. By assigning any of the NorthStar PBR shaders the material
    interface will use the custom inspector. \n\n![](./Images/WeatherEffects/Fig9.png)\n\nIn
    the inspector, the Selected Shader dropdown gives the artist some informative
    choices while also limiting what information is displayed. By using this dropdown
    it gives a central location for all the shaders. \n\n![](./Images/WeatherEffects/Fig14.png)\n\nBy
    selecting a different shader in the above dropdown the inspector updates to display
    the relative options. \n\nPBR with smoothness: \n\n![](./Images/WeatherEffects/Fig15.png)\n\nPBR
    Foliage: \n\n![](./Images/WeatherEffects/Fig3.png)\n"
  m_overrideMarkdownRoot: .\Documentation/
